plugins {
    id 'java-library'
    id "io.qameta.allure" version "2.9.6"
    id "io.freefair.lombok" version "6.0.0-m2"
    id 'org.gradle.test-retry' version '1.0.0'
}

repositories {
    mavenCentral()
}

def junitVersion = "5.8.2",
    slfVersion = "1.7.36",
    allureVersion = "2.17.3",
    restAssuredVersion = "4.5.1",
    lombokVersion = "1.18.10",
    ownerVersion = "1.0.4",
    jacksonVersion = "2.9.5",
    javaFakerVersion = "1.0.2"


allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

dependencies {
    testImplementation(

            "io.qameta.allure:allure-selenide:$allureVersion",
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "org.slf4j:slf4j-simple:$slfVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "org.projectlombok:lombok:$lombokVersion",
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "org.aeonbits.owner:owner:$ownerVersion",
            "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            "com.github.javafaker:javafaker:$javaFakerVersion"
    )
}

test {
    useJUnitPlatform()
    retry {
        failOnPassedAfterRetry = true
        maxFailures = 10
        maxRetries = 2
    }
}

compileTestJava {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
//            events "started", "failed"
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task payments(type: Test) {
    useJUnitPlatform {
        includeTags "payments"
    }
}

task note(type: Test) {
    useJUnitPlatform {
        includeTags "note"
    }
}

task task(type: Test) {
    useJUnitPlatform {
        includeTags "task"
    }
}

task auth(type: Test) {
    useJUnitPlatform {
        includeTags "auth"
    }
}
