plugins {
    id 'java-library'
    id "io.qameta.allure" version "2.9.6"
    id "io.freefair.lombok" version "6.0.0-m2"
}

repositories {
    mavenCentral()
}
def junitVersion = "5.8.2",
    slfVersion = "1.7.36",
    allureVersion = "2.17.3",
    restAssuredVersion = "4.5.1",
    lombokVersion = "1.18.10"


allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

dependencies {
    testImplementation(

            "io.qameta.allure:allure-selenide:$allureVersion",
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "org.slf4j:slf4j-simple:$slfVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "org.projectlombok:lombok:$lombokVersion",
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            'org.aeonbits.owner:owner:1.0.4',
            'com.fasterxml.jackson.core:jackson-databind:2.9.5',
            'com.google.code.gson:gson:2.8.9',
            'com.github.javafaker:javafaker:1.0.2'
    )
}

test {
    useJUnitPlatform()
}


compileTestJava {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
//            events "started", "failed"
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task payments(type: Test) {
    useJUnitPlatform {
        includeTags "payments"
    }
}

task timeline(type: Test) {
    useJUnitPlatform {
        includeTags "timeline"
    }
}

task note(type: Test) {
    useJUnitPlatform {
        includeTags "note"
    }
}

task sendReminder(type: Test) {
    useJUnitPlatform {
        includeTags "sendReminder"
    }
}

task task(type: Test) {
    useJUnitPlatform {
        includeTags "task"
    }
}
